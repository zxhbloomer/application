server:
  port: 9501
  ssl:
    key-store: classpath:httpsfile.pfx
    key-store-password: RyrxMn5B
    keyStoreType: PKCS12
#Hystrix 执行超时时间
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 80000
#Ribbon的超时时间
ribbon:
  ReadTimeout: 80000
  ConnectTimeout: 80000
#端点
management:
  endpoints:
    web:
      exposure:
        include: "*"
spring:
  application:
    name: service-route-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true #是否与服务发现组件进行结合
      default-filters:
        - Elapsed=true #在XML注入我们的ElapsedGatewayFilterFactory过滤器
      routes:
        - id: manageSerivce
          uri: lb://service-client-consumer # http请求为lb://前缀+服务id;ws请求为lb:ws://前缀+服务id；表示将请求负载到哪一个服务上(EurekaServer里面的那个ApplicationName)我这里将这个请求路由到了EUREKA-CLIENT-CONSUMER1
          order: 0                          #这个路由的执行order,(重复的匹配规则的时候哪个先,相当于顺序)
          predicates:                      #路由的规则(数组)
            - Path=/service/manage/**         #路由的规则
          filters:                         #请求转发前的filter，为一个数组(执行过滤器)
            - SwaggerHeaderGatewayFilter   #这个过滤器必须放在最前方!!!,过滤器的顺序会影响效果!!!\
            - SimpleLogs
            - StripPrefix=2                 #StripPrefix可以接受一个非负整数,表示去掉多少层前缀
            - AddResponseHeader=X-Response-Default-Foo, Default-Bar #设置Response响应头的参数
            - name: Hystrix   #路由熔断过滤器
              args:
                name: myCommandName #起一个名字,即HystrixCommand的名字
                fallbackUri: forward:/fallback #即 fallback 对应的 uri，这里的 uri 仅支持forward: schemed 的
            - name: RequestRateLimiter #限流过滤器
              args:
                key-resolver: "#{@remoteAddressKeyResolver}"   #SpEl表达式,表示Bean名称详细参见RemoteAddressKeyResolver
                redis-rate-limiter.replenishRate: 1 #令牌桶填充平均速率，1秒/1个。
                redis-rate-limiter.burstCapacity: 5 #令牌桶上限